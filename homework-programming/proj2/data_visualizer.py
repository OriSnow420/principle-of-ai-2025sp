"""Visualize Acc and Loss data when training"""
import json
import os
import argparse
from typing import Dict
import matplotlib.pyplot as plt

MODEL_RESULT_NAME = "result/bad_model.json"
IMPROVED_RESULT_NAME = "result/improved_model.json"

def parse_json_file(file_name: str) -> Dict:
    """Read data from file

    Args:
        file_name (str): File path

    Returns:
        Dict: The data generated by data, contains keys:

        'train_loss': list
        'train_acc': list
        'val_loss': list
        'val_acc': list
    """
    with open(file_name, 'r', encoding='utf-8') as f:
        return json.load(f)

def visualize_data(data: Dict, pic_name: str):
    """Visualize data and generate a pyplot graph

    Args:
        data (Dict): The data generated by model
    """
    plt.figure(figsize=(12, 5))
    plt.subplot(1, 2, 1)
    plt.plot(data['train_loss'], label='Train Loss')
    plt.plot(data['val_loss'], label='Val Loss')
    plt.legend()
    plt.title('Loss Curve')

    plt.subplot(1, 2, 2)
    plt.plot(data['train_acc'], label='Train Acc')
    plt.plot(data['val_acc'], label='Val Acc')
    plt.legend()
    plt.title('Accuracy Curve')
    plt.savefig(f'{pic_name}.png')
    plt.show()

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--file", type=str, required=False, default=MODEL_RESULT_NAME)

    args = parser.parse_args()

    visualize_data(parse_json_file(args.file), os.path.splitext(args.file)[0])
